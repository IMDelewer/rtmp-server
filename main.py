import os
import subprocess
from fastapi import FastAPI, HTTPException
from fastapi.responses import FileResponse
from pydantic import BaseModel
import json

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è HLS
HLS_PATH = "hls"
os.makedirs(HLS_PATH, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# –§–∞–π–ª —Å –∫–ª—é—á–∞–º–∏ –ø–æ—Ç–æ–∫–æ–≤
STREAM_KEYS_FILE = "streams.json"
if not os.path.exists(STREAM_KEYS_FILE):
    with open(STREAM_KEYS_FILE, "w") as f:
        json.dump({}, f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –ø–æ—Ç–æ–∫–æ–≤
def load_stream_keys():
    with open(STREAM_KEYS_FILE, "r") as f:
        return json.load(f)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏ –ø–æ—Ç–æ–∫–æ–≤
def save_stream_keys(data):
    with open(STREAM_KEYS_FILE, "w") as f:
        json.dump(data, f, indent=4)

# –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ FFmpeg –ø—Ä–æ—Ü–µ—Å—Å—ã
ffmpeg_processes = {}

class StreamKey(BaseModel):
    stream_key: str

@app.get("/")
def home():
    return {"message": "üî• RTMP —Å–µ—Ä–≤–µ—Ä –Ω–∞ Python —Å FFmpeg —Ä–∞–±–æ—Ç–∞–µ—Ç! –°—Ç—Ä–∏–º—å—Ç–µ —á–µ—Ä–µ–∑ /rtmp –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ /hls"}

@app.post("/rtmp/{stream_key}")
def start_stream(stream_key: str):
    stream_keys = load_stream_keys()

    if stream_key not in stream_keys:
        raise HTTPException(status_code=403, detail="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –ø–æ—Ç–æ–∫–∞!")

    rtmp_url = f"rtmp://127.0.0.1:1935/live/{stream_key}"
    hls_output = f"{HLS_PATH}/{stream_key}.m3u8"

    # –ó–∞–ø—É—Å–∫–∞–µ–º FFmpeg –¥–ª—è HLS
    ffmpeg_cmd = [
        "ffmpeg",
        "-i", rtmp_url,
        "-c:v", "libx264",
        "-preset", "ultrafast",
        "-tune", "zerolatency",
        "-c:a", "aac",
        "-f", "hls",
        "-hls_time", "3",
        "-hls_list_size", "10",
        "-hls_flags", "delete_segments",
        hls_output
    ]

    process = subprocess.Popen(ffmpeg_cmd)
    ffmpeg_processes[stream_key] = process

    return {"message": f"‚úÖ –°—Ç—Ä–∏–º {stream_key} –∑–∞–ø—É—â–µ–Ω!"}

@app.get("/hls/{stream_key}")
def watch_stream(stream_key: str):
    file_path = f"{HLS_PATH}/{stream_key}.m3u8"
    if os.path.exists(file_path):
        return FileResponse(file_path)
    raise HTTPException(status_code=404, detail="‚ùå –°—Ç—Ä–∏–º –Ω–µ –Ω–∞–π–¥–µ–Ω!")

@app.get("/status")
def stream_status():
    return {"active_streams": list(ffmpeg_processes.keys())}

@app.post("/add_stream")
def add_stream(data: StreamKey):
    stream_keys = load_stream_keys()
    stream_keys[data.stream_key] = True
    save_stream_keys(stream_keys)
    return {"message": f"‚úÖ –ö–ª—é—á {data.stream_key} –¥–æ–±–∞–≤–ª–µ–Ω!"}

@app.post("/stop/{stream_key}")
def stop_stream(stream_key: str):
    if stream_key in ffmpeg_processes:
        ffmpeg_processes[stream_key].terminate()
        del ffmpeg_processes[stream_key]
        return {"message": f"üõë –°—Ç—Ä–∏–º {stream_key} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
    raise HTTPException(status_code=404, detail="‚ùå –°—Ç—Ä–∏–º –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    import uvicorn
    from threading import Thread

    # –ó–∞–ø—É—Å–∫ FastAPI
    uvicorn.run(app, host="0.0.0.0", port=5000)
